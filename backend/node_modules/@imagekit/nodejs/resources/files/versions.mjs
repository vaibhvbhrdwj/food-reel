// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import { path } from "../../internal/utils/path.mjs";
export class Versions extends APIResource {
    /**
     * This API returns details of all versions of a file.
     *
     * @example
     * ```ts
     * const files = await client.files.versions.list('fileId');
     * ```
     */
    list(fileID, options) {
        return this._client.get(path `/v1/files/${fileID}/versions`, options);
    }
    /**
     * This API deletes a non-current file version permanently. The API returns an
     * empty response.
     *
     * Note: If you want to delete all versions of a file, use the delete file API.
     *
     * @example
     * ```ts
     * const version = await client.files.versions.delete(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    delete(versionID, params, options) {
        const { fileId } = params;
        return this._client.delete(path `/v1/files/${fileId}/versions/${versionID}`, options);
    }
    /**
     * This API returns an object with details or attributes of a file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.get('versionId', {
     *   fileId: 'fileId',
     * });
     * ```
     */
    get(versionID, params, options) {
        const { fileId } = params;
        return this._client.get(path `/v1/files/${fileId}/versions/${versionID}`, options);
    }
    /**
     * This API restores a file version as the current file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.restore(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    restore(versionID, params, options) {
        const { fileId } = params;
        return this._client.put(path `/v1/files/${fileId}/versions/${versionID}/restore`, options);
    }
}
//# sourceMappingURL=versions.mjs.map