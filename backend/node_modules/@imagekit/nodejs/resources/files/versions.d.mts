import { APIResource } from "../../core/resource.mjs";
import * as FilesAPI from "./files.mjs";
import { APIPromise } from "../../core/api-promise.mjs";
import { RequestOptions } from "../../internal/request-options.mjs";
export declare class Versions extends APIResource {
    /**
     * This API returns details of all versions of a file.
     *
     * @example
     * ```ts
     * const files = await client.files.versions.list('fileId');
     * ```
     */
    list(fileID: string, options?: RequestOptions): APIPromise<VersionListResponse>;
    /**
     * This API deletes a non-current file version permanently. The API returns an
     * empty response.
     *
     * Note: If you want to delete all versions of a file, use the delete file API.
     *
     * @example
     * ```ts
     * const version = await client.files.versions.delete(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    delete(versionID: string, params: VersionDeleteParams, options?: RequestOptions): APIPromise<VersionDeleteResponse>;
    /**
     * This API returns an object with details or attributes of a file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.get('versionId', {
     *   fileId: 'fileId',
     * });
     * ```
     */
    get(versionID: string, params: VersionGetParams, options?: RequestOptions): APIPromise<FilesAPI.File>;
    /**
     * This API restores a file version as the current file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.restore(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    restore(versionID: string, params: VersionRestoreParams, options?: RequestOptions): APIPromise<FilesAPI.File>;
}
export type VersionListResponse = Array<FilesAPI.File>;
export interface VersionDeleteResponse {
}
export interface VersionDeleteParams {
    /**
     * The unique `fileId` of the uploaded file. `fileId` is returned in list and
     * search assets API and upload API.
     */
    fileId: string;
}
export interface VersionGetParams {
    /**
     * The unique `fileId` of the uploaded file. `fileId` is returned in list and
     * search assets API and upload API.
     */
    fileId: string;
}
export interface VersionRestoreParams {
    /**
     * The unique `fileId` of the uploaded file. `fileId` is returned in list and
     * search assets API and upload API.
     */
    fileId: string;
}
export declare namespace Versions {
    export { type VersionListResponse as VersionListResponse, type VersionDeleteResponse as VersionDeleteResponse, type VersionDeleteParams as VersionDeleteParams, type VersionGetParams as VersionGetParams, type VersionRestoreParams as VersionRestoreParams, };
}
//# sourceMappingURL=versions.d.mts.map