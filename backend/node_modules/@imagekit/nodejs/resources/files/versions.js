"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Versions = void 0;
const resource_1 = require("../../core/resource.js");
const path_1 = require("../../internal/utils/path.js");
class Versions extends resource_1.APIResource {
    /**
     * This API returns details of all versions of a file.
     *
     * @example
     * ```ts
     * const files = await client.files.versions.list('fileId');
     * ```
     */
    list(fileID, options) {
        return this._client.get((0, path_1.path) `/v1/files/${fileID}/versions`, options);
    }
    /**
     * This API deletes a non-current file version permanently. The API returns an
     * empty response.
     *
     * Note: If you want to delete all versions of a file, use the delete file API.
     *
     * @example
     * ```ts
     * const version = await client.files.versions.delete(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    delete(versionID, params, options) {
        const { fileId } = params;
        return this._client.delete((0, path_1.path) `/v1/files/${fileId}/versions/${versionID}`, options);
    }
    /**
     * This API returns an object with details or attributes of a file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.get('versionId', {
     *   fileId: 'fileId',
     * });
     * ```
     */
    get(versionID, params, options) {
        const { fileId } = params;
        return this._client.get((0, path_1.path) `/v1/files/${fileId}/versions/${versionID}`, options);
    }
    /**
     * This API restores a file version as the current file version.
     *
     * @example
     * ```ts
     * const file = await client.files.versions.restore(
     *   'versionId',
     *   { fileId: 'fileId' },
     * );
     * ```
     */
    restore(versionID, params, options) {
        const { fileId } = params;
        return this._client.put((0, path_1.path) `/v1/files/${fileId}/versions/${versionID}/restore`, options);
    }
}
exports.Versions = Versions;
//# sourceMappingURL=versions.js.map