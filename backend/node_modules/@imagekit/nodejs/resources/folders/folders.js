"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Folders = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const JobAPI = tslib_1.__importStar(require("./job.js"));
const job_1 = require("./job.js");
class Folders extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.job = new JobAPI.Job(this._client);
    }
    /**
     * This will create a new folder. You can specify the folder name and location of
     * the parent folder where this new folder should be created.
     *
     * @example
     * ```ts
     * const folder = await client.folders.create({
     *   folderName: 'summer',
     *   parentFolderPath: '/product/images/',
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/v1/folder', { body, ...options });
    }
    /**
     * This will delete a folder and all its contents permanently. The API returns an
     * empty response.
     *
     * @example
     * ```ts
     * const folder = await client.folders.delete({
     *   folderPath: '/folder/to/delete/',
     * });
     * ```
     */
    delete(body, options) {
        return this._client.delete('/v1/folder', { body, ...options });
    }
    /**
     * This will copy one folder into another. The selected folder, its nested folders,
     * files, and their versions (in `includeVersions` is set to true) are copied in
     * this operation. Note: If any file at the destination has the same name as the
     * source file, then the source file and its versions will be appended to the
     * destination file version history.
     *
     * @example
     * ```ts
     * const response = await client.folders.copy({
     *   destinationPath: '/path/of/destination/folder',
     *   sourceFolderPath: '/path/of/source/folder',
     * });
     * ```
     */
    copy(body, options) {
        return this._client.post('/v1/bulkJobs/copyFolder', { body, ...options });
    }
    /**
     * This will move one folder into another. The selected folder, its nested folders,
     * files, and their versions are moved in this operation. Note: If any file at the
     * destination has the same name as the source file, then the source file and its
     * versions will be appended to the destination file version history.
     *
     * @example
     * ```ts
     * const response = await client.folders.move({
     *   destinationPath: '/path/of/destination/folder',
     *   sourceFolderPath: '/path/of/source/folder',
     * });
     * ```
     */
    move(body, options) {
        return this._client.post('/v1/bulkJobs/moveFolder', { body, ...options });
    }
    /**
     * This API allows you to rename an existing folder. The folder and all its nested
     * assets and sub-folders will remain unchanged, but their paths will be updated to
     * reflect the new folder name.
     *
     * @example
     * ```ts
     * const response = await client.folders.rename({
     *   folderPath: '/path/of/folder',
     *   newFolderName: 'new-folder-name',
     * });
     * ```
     */
    rename(body, options) {
        return this._client.post('/v1/bulkJobs/renameFolder', { body, ...options });
    }
}
exports.Folders = Folders;
Folders.Job = job_1.Job;
//# sourceMappingURL=folders.js.map