import type { RequestInit, RequestInfo } from "./internal/builtin-types.mjs";
import type { PromiseOrValue, MergedRequestInit, FinalizedRequestInit } from "./internal/types.mjs";
export type { Logger, LogLevel } from "./internal/utils/log.mjs";
import * as Opts from "./internal/request-options.mjs";
import * as Errors from "./core/error.mjs";
import * as Uploads from "./core/uploads.mjs";
import * as API from "./resources/index.mjs";
import { APIPromise } from "./core/api-promise.mjs";
import { AssetListParams, AssetListResponse, Assets } from "./resources/assets.mjs";
import { CustomMetadataField, CustomMetadataFieldCreateParams, CustomMetadataFieldDeleteResponse, CustomMetadataFieldListParams, CustomMetadataFieldListResponse, CustomMetadataFieldUpdateParams, CustomMetadataFields } from "./resources/custom-metadata-fields.mjs";
import { BaseWebhookEvent, UnsafeUnwrapWebhookEvent, UnwrapWebhookEvent, UploadPostTransformErrorEvent, UploadPostTransformSuccessEvent, UploadPreTransformErrorEvent, UploadPreTransformSuccessEvent, VideoTransformationAcceptedEvent, VideoTransformationErrorEvent, VideoTransformationReadyEvent, Webhooks } from "./resources/webhooks.mjs";
import { Accounts } from "./resources/accounts/accounts.mjs";
import { Beta } from "./resources/beta/beta.mjs";
import { Cache } from "./resources/cache/cache.mjs";
import { File, FileCopyParams, FileCopyResponse, FileMoveParams, FileMoveResponse, FileRenameParams, FileRenameResponse, FileUpdateParams, FileUpdateResponse, FileUploadParams, FileUploadResponse, Files, Folder, Metadata, UpdateFileRequest } from "./resources/files/files.mjs";
import { FolderCopyParams, FolderCopyResponse, FolderCreateParams, FolderCreateResponse, FolderDeleteParams, FolderDeleteResponse, FolderMoveParams, FolderMoveResponse, FolderRenameParams, FolderRenameResponse, Folders } from "./resources/folders/folders.mjs";
import { type Fetch } from "./internal/builtin-types.mjs";
import { HeadersLike, NullableHeaders } from "./internal/headers.mjs";
import { FinalRequestOptions, RequestOptions } from "./internal/request-options.mjs";
import { type LogLevel, type Logger } from "./internal/utils/log.mjs";
export interface ClientOptions {
    /**
     * Your ImageKit private API key (starts with `private_`).
     * You can find this in the [ImageKit dashboard](https://imagekit.io/dashboard/developer/api-keys).
     *
     */
    privateKey?: string | undefined;
    /**
     * ImageKit uses your API key as username and ignores the password.
     * The SDK sets a dummy value. You can ignore this field.
     *
     */
    password?: string | null | undefined;
    /**
     * Your ImageKit webhook secret for verifying webhook signatures (starts with `whsec_`).
     * You can find this in the [ImageKit dashboard](https://imagekit.io/dashboard/developer/webhooks).
     * Only required if you're using webhooks.
     *
     */
    webhookSecret?: string | null | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['IMAGE_KIT_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     *
     * @unit milliseconds
     */
    timeout?: number | undefined;
    /**
     * Additional `RequestInit` options to be passed to `fetch` calls.
     * Properties will be overridden by per-request `fetchOptions`.
     */
    fetchOptions?: MergedRequestInit | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we expect that `fetch` is defined globally.
     */
    fetch?: Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `null` in request options.
     */
    defaultHeaders?: HeadersLike | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Record<string, string | undefined> | undefined;
    /**
     * Set the log level.
     *
     * Defaults to process.env['IMAGE_KIT_LOG'] or 'warn' if it isn't set.
     */
    logLevel?: LogLevel | undefined;
    /**
     * Set the logger.
     *
     * Defaults to globalThis.console.
     */
    logger?: Logger | undefined;
}
/**
 * API Client for interfacing with the Image Kit API.
 */
export declare class ImageKit {
    #private;
    privateKey: string;
    password: string | null;
    webhookSecret: string | null;
    baseURL: string;
    maxRetries: number;
    timeout: number;
    logger: Logger | undefined;
    logLevel: LogLevel | undefined;
    fetchOptions: MergedRequestInit | undefined;
    private fetch;
    protected idempotencyHeader?: string;
    private _options;
    /**
     * API Client for interfacing with the Image Kit API.
     *
     * @param {string | undefined} [opts.privateKey=process.env['IMAGEKIT_PRIVATE_KEY'] ?? undefined]
     * @param {string | null | undefined} [opts.password=process.env['OPTIONAL_IMAGEKIT_IGNORES_THIS'] ?? do_not_set]
     * @param {string | null | undefined} [opts.webhookSecret=process.env['IMAGEKIT_WEBHOOK_SECRET'] ?? null]
     * @param {string} [opts.baseURL=process.env['IMAGE_KIT_BASE_URL'] ?? https://api.imagekit.io] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.
     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, privateKey, password, webhookSecret, ...opts }?: ClientOptions);
    /**
     * Create a new client instance re-using the same options given to the current client with optional overriding.
     */
    withOptions(options: Partial<ClientOptions>): this;
    protected defaultQuery(): Record<string, string | undefined> | undefined;
    protected validateHeaders({ values, nulls }: NullableHeaders): void;
    protected authHeaders(opts: FinalRequestOptions): Promise<NullableHeaders | undefined>;
    /**
     * Basic re-implementation of `qs.stringify` for primitive types.
     */
    protected stringifyQuery(query: Record<string, unknown>): string;
    private getUserAgent;
    protected defaultIdempotencyKey(): string;
    protected makeStatusError(status: number, error: Object, message: string | undefined, headers: Headers): Errors.APIError;
    buildURL(path: string, query: Record<string, unknown> | null | undefined, defaultBaseURL?: string | undefined): string;
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    protected prepareOptions(options: FinalRequestOptions): Promise<void>;
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: FinalRequestOptions;
    }): Promise<void>;
    get<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    post<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    patch<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    put<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    delete<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    private methodRequest;
    request<Rsp>(options: PromiseOrValue<FinalRequestOptions>, remainingRetries?: number | null): APIPromise<Rsp>;
    private makeRequest;
    fetchWithTimeout(url: RequestInfo, init: RequestInit | undefined, ms: number, controller: AbortController): Promise<Response>;
    private shouldRetry;
    private retryRequest;
    private calculateDefaultRetryTimeoutMillis;
    buildRequest(inputOptions: FinalRequestOptions, { retryCount }?: {
        retryCount?: number;
    }): Promise<{
        req: FinalizedRequestInit;
        url: string;
        timeout: number;
    }>;
    private buildHeaders;
    private buildBody;
    static ImageKit: typeof ImageKit;
    static DEFAULT_TIMEOUT: number;
    static ImageKitError: typeof Errors.ImageKitError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    customMetadataFields: API.CustomMetadataFields;
    files: API.Files;
    assets: API.Assets;
    cache: API.Cache;
    folders: API.Folders;
    accounts: API.Accounts;
    beta: API.Beta;
    webhooks: API.Webhooks;
    helper: API.Helper;
}
export declare namespace ImageKit {
    export type RequestOptions = Opts.RequestOptions;
    export { CustomMetadataFields as CustomMetadataFields, type CustomMetadataField as CustomMetadataField, type CustomMetadataFieldListResponse as CustomMetadataFieldListResponse, type CustomMetadataFieldDeleteResponse as CustomMetadataFieldDeleteResponse, type CustomMetadataFieldCreateParams as CustomMetadataFieldCreateParams, type CustomMetadataFieldUpdateParams as CustomMetadataFieldUpdateParams, type CustomMetadataFieldListParams as CustomMetadataFieldListParams, };
    export { Files as Files, type File as File, type Folder as Folder, type Metadata as Metadata, type UpdateFileRequest as UpdateFileRequest, type FileUpdateResponse as FileUpdateResponse, type FileCopyResponse as FileCopyResponse, type FileMoveResponse as FileMoveResponse, type FileRenameResponse as FileRenameResponse, type FileUploadResponse as FileUploadResponse, type FileUpdateParams as FileUpdateParams, type FileCopyParams as FileCopyParams, type FileMoveParams as FileMoveParams, type FileRenameParams as FileRenameParams, type FileUploadParams as FileUploadParams, };
    export { Assets as Assets, type AssetListResponse as AssetListResponse, type AssetListParams as AssetListParams, };
    export { Cache as Cache };
    export { Folders as Folders, type FolderCreateResponse as FolderCreateResponse, type FolderDeleteResponse as FolderDeleteResponse, type FolderCopyResponse as FolderCopyResponse, type FolderMoveResponse as FolderMoveResponse, type FolderRenameResponse as FolderRenameResponse, type FolderCreateParams as FolderCreateParams, type FolderDeleteParams as FolderDeleteParams, type FolderCopyParams as FolderCopyParams, type FolderMoveParams as FolderMoveParams, type FolderRenameParams as FolderRenameParams, };
    export { Accounts as Accounts };
    export { Beta as Beta };
    export { Webhooks as Webhooks, type BaseWebhookEvent as BaseWebhookEvent, type UploadPostTransformErrorEvent as UploadPostTransformErrorEvent, type UploadPostTransformSuccessEvent as UploadPostTransformSuccessEvent, type UploadPreTransformErrorEvent as UploadPreTransformErrorEvent, type UploadPreTransformSuccessEvent as UploadPreTransformSuccessEvent, type VideoTransformationAcceptedEvent as VideoTransformationAcceptedEvent, type VideoTransformationErrorEvent as VideoTransformationErrorEvent, type VideoTransformationReadyEvent as VideoTransformationReadyEvent, type UnsafeUnwrapWebhookEvent as UnsafeUnwrapWebhookEvent, type UnwrapWebhookEvent as UnwrapWebhookEvent, };
    export type BaseOverlay = API.BaseOverlay;
    export type Extensions = API.Extensions;
    export type ImageOverlay = API.ImageOverlay;
    export type Overlay = API.Overlay;
    export type OverlayPosition = API.OverlayPosition;
    export type OverlayTiming = API.OverlayTiming;
    export type SolidColorOverlay = API.SolidColorOverlay;
    export type SolidColorOverlayTransformation = API.SolidColorOverlayTransformation;
    export type SrcOptions = API.SrcOptions;
    export type StreamingResolution = API.StreamingResolution;
    export type SubtitleOverlay = API.SubtitleOverlay;
    export type SubtitleOverlayTransformation = API.SubtitleOverlayTransformation;
    export type TextOverlay = API.TextOverlay;
    export type TextOverlayTransformation = API.TextOverlayTransformation;
    export type Transformation = API.Transformation;
    export type TransformationPosition = API.TransformationPosition;
    export type VideoOverlay = API.VideoOverlay;
}
//# sourceMappingURL=client.d.mts.map